import { userService } from '../services/UserService';
import { userRepository } from '../repositories/UserRepository';
import { initializeDatabase, AppDataSource } from '../config/ormconfig';

const testIntegration = async () => {
    console.log('üß™ TEST INTEGRAL - TypeORM + Services + Repository');
    console.log('='.repeat(60));

    try {
        // 1. Inicializar base de datos
        console.log('\n1. Inicializando base de datos...');
        await initializeDatabase();
        console.log('‚úÖ Base de datos inicializada correctamente');

        // 2. Test de conexi√≥n de TypeORM
        console.log('\n2. Testeando conexi√≥n TypeORM...');
        const isConnected = AppDataSource.isInitialized;
        console.log('‚úÖ TypeORM conectado:', isConnected);

        // 3. Test de m√©todos del Repository
        console.log('\n3. Testeando m√©todos del Repository...');

        // Test findAll
        const allUsers = await userRepository.findAll();
        console.log('‚úÖ findAll funciona:', Array.isArray(allUsers));

        // Test emailExists
        const emailExists = await userRepository.emailExists('test@example.com');
        console.log('‚úÖ emailExists funciona:', typeof emailExists === 'boolean');

        console.log('‚úÖ Todos los m√©todos del repository responden');

        // 4. Test de m√©todos del Service
        console.log('\n4. Testeando m√©todos del Service...');

        // Test de validaci√≥n de email
        const invalidEmail = await userService.getUserByEmail('invalid-email');
        console.log('‚úÖ Validaci√≥n de email funciona:', invalidEmail.success === false);

        // Test de validaci√≥n de password
        const weakPassword = await userService.createUser({
            nombre_usuario: 'test',
            correo: 'test2@example.com',
            contrasena: 'weak',
            fecha_nacimiento: new Date('1990-01-01')
        });
        console.log('‚úÖ Validaci√≥n de password funciona:', weakPassword.success === false);

        console.log('‚úÖ Todos los m√©todos del service responden');

        // 5. Test deÂÅ•Â∫∑ check de la API
        console.log('\n5. TesteandoÂÅ•Â∫∑ check...');
        try {
            const response = await fetch('http://localhost:3001/api/v1/health');
            const health = await response.json();
            console.log('‚úÖ Health check funciona:', health.status === 'OK');
        } catch (error) {
            console.log('‚ö†Ô∏è Health check no disponible (servidor no corriendo)');
        }

        console.log('\n' + '='.repeat(60));
        console.log('‚úÖ TEST INTEGRAL COMPLETADO EXITOSAMENTE');
        console.log('‚úÖ Migraci√≥n a TypeORM completada correctamente');
        console.log('‚úÖ Todos los componentes funcionan en conjunto');

    } catch (error) {
        console.error('‚ùå Error en test integral:', error);
        process.exit(1);
    }
};

// Ejecutar el test
testIntegration().catch(console.error);